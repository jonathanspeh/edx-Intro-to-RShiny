---
title: "Notes_Week2"
format: html
---
## Used Libraries
```{r}
#| eval: false
library(shiny)
library(shinydashboard)
library(DT)
library(echarts4r)
library(leaflet)
library(magrittr)
library(shinyWidgets)
```




## Simple Datatable usinging {DT}

- Use `renderDT({})` in Server and `DTOutput()` in UI - Consistent amongst other packages
- Same logic for
    - Visualisation with {Echarts4r}
    - maps with  {leaflet}
    
- `renderEcharts4r` - renders Plot
- `renderEcharts4r` - adds plot to output 
- Tabs in {shinydashbord} - simply add `tabBox` and `tabPanel`
- *Important* server funktions often use `myFunction({})`

```{r}
#| eval: false
ui <- dashboardPage(
  dashboardHeader(),
  dashboardSidebar(disable = T),
  dashboardBody(
    fluidRow(DTOutput("datatable"))))

# Server ----
server <- function(input, output) {
  output$datatable = renderDT({
    datatable(iris)
  })}

shinyApp(ui = ui, server = server)
```

## Interaktive Components via {shinywidgets}

- Webpages provides code for UI and Server
- *Each* InputID and OutputID needs to be Unique, otherwise everything crashes

Structure of input and output calls:

```{r}
#| eval: false
#UI
ui <- dashboardPage(
  dashboardHeader(),
  dashboardSidebar(),
  dashboardBody(
          sliderInput("inputID", label = h3("Slider"), min = 0, 
                      max = 100, value = 50),
          br(),
          verbatimTextOutput("outputID")))


server <- function(input, output) {
  output$outputID <- renderPrint({ input$inputID })}
shinyApp(ui = ui, server = server)
```

## Include buttons
- possible with `shiny::actioButton` or `shinyWidget;;actionBttn`
- Used `bindEvent()` to "look at Button" at make event (e.g. a render) wait for the button
- `bindEvent(renderPrint("Button Pressed"), input$buttonId)` = `renderPrint("Button pressed") |> bindEvent(input$buttonID)}` 

```{r}
#| eval: false
ui <- dashboardPage(
  dashboardHeader(),
  dashboardSidebar(actionBttn("buttonID",
                              label = "Roll virtual die")),
  dashboardBody(
          verbatimTextOutput("outputId")))


server <- function(input, output) {
  output$outputId <- renderPrint({sample(1:6,1)}) |>
                      bindEvent(input$buttonID)}

shinyApp(ui = ui, server = server)
```

## Notifications and modals

- Notification - shows a little Pop-Up message that closes after a preset duration
  - Created with `showNotification()`
  - removed with `removeNotification()`
  - Reactivity via  `observeEvent()`

```{r}
#| eval: false
ui <- dashboardPage(
  dashboardHeader(),
  dashboardSidebar(actionBttn("buttonID",
                              label = "Roll virtual die")),
  dashboardBody(
          verbatimTextOutput("outputId")))


server <- function(input, output) {
  output$outputId <- renderPrint({sample(1:6,1)}) |>
    bindEvent(input$buttonID)
  observeEvent(input$buttonID, {
    showNotification("roll updated!",
                     duration = 3,
                     type = "message")})}

shinyApp(ui = ui, server = server)
``` 
  

- Modal dialogue - Kind of like a "pop-up box", allows to show messages in a box on top of the page  
    - stays until closed 
- Can be used to include any kind of UI Elements
- Created with `showModal` as wrapper for `modalDialog()`, 
- reactivity is like in `showNotification`
Use cases:
- request User Input
- show details of table row etc. 


```{r}
#| eval: false
ui <- dashboardPage(
  dashboardHeader(),
  dashboardSidebar(actionBttn("buttonID",
                              label = "Roll virtual die")),
  dashboardBody(
          verbatimTextOutput("outputId")))


server <- function(input, output) {
  output$outputId <- renderPrint({sample(1:6,1)}) |>
    bindEvent(input$buttonID)
  observeEvent(input$buttonID, {
    showModal(
      modalDialog(title = "Important Message!",
                  fluidRow(box(width = 12, status = "info",
                                     "Roll updated")),
                  easyClose = FALSE,
                  size = "m"))})}

shinyApp(ui = ui, server = server)
``` 
Experiments with `observeEvent`: 

```{r}
ui <- dashboardPage(
  dashboardHeader(),
  dashboardSidebar(sliderInput("inputId", label = h3("Enter hight in cm"), min = 100, 
                      max = 200, value = 170),
                   actionBttn("buttonId",label = "submit")),
  dashboardBody(
          verbatimTextOutput("outputId")))


server <- function(input, output) {
  observeEvent(input$inputId, if (input$inputId < 160){
    output$outputId = renderText({"You are small!!"})} else {
    output$outputId = renderText({"You are normal!!"})})}


server <- function(input, output) {
  observeEvent(input$buttonId, if (input$inputId < 160){
    output$outputId = renderText({"You are small!!"})} else {
    output$outputId = renderText({"You are normal!!"})})}

shinyApp(ui = ui, server = server)

```

## Use modules fpr server and ui - allows you to break down app in smaller pices

```{r}
plotUI = function(id){
  tagList(
    plotOutput(NS(id, "myPlot")),
    selectInput(NS(id, "myCol"), "select Color",
                choices = c("red", "green", "blue"))
    )}

plotServer = function(id){
  moduleServer(id, function(input, output, session){
    output$myPlot = renderPlot({mpg %>% 
        ggplot(aes(x = cty, y = hwy)) +
        geom_smooth(method = "lm", formula = y~x) + 
        geom_point(color = input$myCol)})})}

# Minimum app

plotApp = function(){
  ui = fluidPage(
    fluidRow(plotUI("myPlot1")))
  server = function(input, output) {
    plotServer("myPlot1")}
shinyApp(ui = ui, server = server)}


plotApp()
```


